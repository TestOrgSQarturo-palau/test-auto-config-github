# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'

- task: SonarQubePrepare@5
  inputs:
    SonarQube: 'SQ'
    scannerMode: 'CLI'
    configMode: 'file'

- task: SonarQubeAnalyze@5
  inputs:
    jdkversion: 'JAVA_HOME_17_X64'

- task: SonarQubePublish@5
  inputs:
    pollingTimeoutSec: '300'

- task: CmdLine@2
  inputs:
    script: |
      response=$(curl -u squ_71a731faccf11ff1f153a660cb017c4dac2e0289: -X GET 'https://artpal.ngrok.io/api/alm_settings/get_binding?project=${{ sonarqube.projectKey }}' | jq -r '.errors[0].msg')
      echo "##vso[task.setvariable variable=response]$response"
      echo $response
  displayName: "Check if Azure DevOps Binding Exists in SonarQube"

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      if ("$(response)" -like '*is not bound to any DevOps Platform*') {
        Write-Host "The condition was met, adding the alm binding."
        curl -u squ_71a731faccf11ff1f153a660cb017c4dac2e0289: -X POST â€˜https://artpal.ngrok.io/api/alm_settings/set_azure_binding?almSetting=${{ sonarqube.sq-devops-integration-name }}&monorepo=false&project=${{ sonarqube.projectKey }}&projectName=${{ sonarqube.projectName }}&repositoryName=${{ sonarqube.repositoryName}}'
      } else {
        Write-Host "The condition was not met, so the task was not executed."
      }
  condition: succeeded()
  displayName: "Apply Azure DevOps Binding in SonarQube"